/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 08 16:03:42 GMT 2018
 */

package org.autotest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.autotest.StackAr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackAr_ESTest extends StackAr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      assertNotNull(stackAr0);
      
      stackAr0.push("");
      boolean boolean0 = stackAr0.isFull();
      assertTrue(boolean0);
      
      String string0 = stackAr0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      Object object0 = stackAr0.pop();
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.increaseCapacity(13);
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
      
      try { 
        stackAr0.get((-5940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      assertNotNull(stackAr0);
      
      int int0 = stackAr0.size();
      assertEquals(0, int0);
      
      try { 
        stackAr0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      try { 
        stackAr0.get((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackAr stackAr0 = null;
      try {
        stackAr0 = new StackAr((-2053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      assertNotNull(stackAr0);
      
      String string0 = stackAr0.toString();
      assertEquals("[,]", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        stackAr0.push("[,]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      assertNotNull(stackAr0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        stackAr0.push(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      int int0 = stackAr0.size();
      assertEquals(0, int0);
      
      String string0 = stackAr0.toString();
      assertEquals("[,]", string0);
      assertNotNull(string0);
      
      int int1 = stackAr0.size();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      stackAr0.increaseCapacity(0);
      stackAr0.increaseCapacity(1);
      boolean boolean0 = stackAr0.isEmpty();
      assertTrue(boolean0);
      
      String string1 = stackAr0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[,,,]", string1);
      assertNotNull(string1);
      
      stackAr0.increaseCapacity(1);
      // Undeclared exception!
      try { 
        stackAr0.increaseCapacity((-2658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1422);
      assertNotNull(stackAr0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      stackAr0.push(object0);
      stackAr0.increaseCapacity(1422);
      boolean boolean0 = stackAr0.isEmpty();
      assertFalse(boolean0);
      
      int int0 = stackAr0.size();
      assertEquals(1, int0);
      
      stackAr0.increaseCapacity(1);
      Object object1 = stackAr0.get(1);
      assertNull(object1);
      
      String string0 = stackAr0.toString();
      assertNotNull(string0);
      
      Object object2 = stackAr0.top();
      assertSame(object2, object0);
      assertNotNull(object2);
      
      String string1 = stackAr0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = stackAr0.isFull();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object3 = stackAr0.top();
      assertSame(object3, object2);
      assertSame(object3, object0);
      assertNotNull(object3);
      
      Object object4 = stackAr0.get(0);
      assertSame(object4, object3);
      assertSame(object4, object0);
      assertSame(object4, object2);
      assertNotNull(object4);
      
      boolean boolean2 = stackAr0.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = stackAr0.size();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean3 = stackAr0.isEmpty();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Object object5 = stackAr0.top();
      assertSame(object5, object2);
      assertSame(object5, object3);
      assertSame(object5, object4);
      assertSame(object5, object0);
      assertNotNull(object5);
      
      int int2 = stackAr0.size();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      
      Object object6 = stackAr0.top();
      assertSame(object6, object4);
      assertSame(object6, object3);
      assertSame(object6, object5);
      assertSame(object6, object2);
      assertSame(object6, object0);
      assertNotNull(object6);
      
      int int3 = stackAr0.size();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      
      String string2 = stackAr0.toString();
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object7 = stackAr0.pop();
      assertSame(object7, object6);
      assertSame(object7, object0);
      assertSame(object7, object2);
      assertSame(object7, object4);
      assertSame(object7, object3);
      assertSame(object7, object5);
      assertNotNull(object7);
      
      String string3 = stackAr0.toString();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("[,,,]", string3);
      assertNotNull(string3);
      
      boolean boolean4 = stackAr0.isEmpty();
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = stackAr0.isFull();
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      try { 
        stackAr0.top();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.push((Object) null);
      stackAr0.increaseCapacity(0);
      Object object0 = stackAr0.top();
      assertNull(object0);
      
      stackAr0.increaseCapacity(0);
      Object object1 = stackAr0.top();
      assertNull(object1);
      
      String string0 = stackAr0.toString();
      assertEquals("[null,,]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = stackAr0.isEmpty();
      assertFalse(boolean0);
      
      int int0 = stackAr0.size();
      assertEquals(1, int0);
      
      Object object2 = stackAr0.get(0);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.push((Object) null);
      stackAr0.increaseCapacity(0);
      stackAr0.push("v~aW`8pKTjNvc9$yN <");
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
      
      boolean boolean1 = stackAr0.isFull();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = stackAr0.isFull();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = stackAr0.size();
      assertEquals(2, int0);
      
      boolean boolean3 = stackAr0.isFull();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = stackAr0.size();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      stackAr0.push("=Ea?|_(Z}5,");
      Object object0 = stackAr0.get(2);
      assertEquals("=Ea?|_(Z}5,", object0);
      assertNotNull(object0);
      
      int int2 = stackAr0.size();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, int2);
      
      int int3 = stackAr0.size();
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(3, int3);
      
      boolean boolean4 = stackAr0.isFull();
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      stackAr0.push((Object) null);
      stackAr0.push((Object) null);
      int int4 = stackAr0.size();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(5, int4);
      
      int int5 = stackAr0.size();
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals(5, int5);
      
      Object object1 = stackAr0.pop();
      assertNull(object1);
      
      Object object2 = stackAr0.top();
      assertNull(object2);
      
      int int6 = stackAr0.size();
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertEquals(4, int6);
      
      String string0 = stackAr0.toString();
      assertFalse(string0.equals((Object)object0));
      assertEquals("[null,v~aW`8pKTjNvc9$yN <,=Ea?|_(Z}5,,null,]", string0);
      assertNotNull(string0);
      
      boolean boolean5 = stackAr0.isFull();
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      Object object3 = stackAr0.pop();
      assertNull(object3);
      
      Object object4 = stackAr0.top();
      assertFalse(object4.equals((Object)string0));
      assertEquals("=Ea?|_(Z}5,", object4);
      assertNotNull(object4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      try { 
        stackAr0.get(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      assertNotNull(stackAr0);
      
      stackAr0.increaseCapacity(3859);
      stackAr0.push("");
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
      
      String string0 = stackAr0.toString();
      assertEquals("[,]", string0);
      assertNotNull(string0);
      
      String string1 = stackAr0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[,]", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      stackAr0.push("[,]");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.push((Object) null);
      int int0 = stackAr0.size();
      assertEquals(1, int0);
      
      stackAr0.push((Object) null);
      boolean boolean0 = stackAr0.isEmpty();
      assertFalse(boolean0);
      
      boolean boolean1 = stackAr0.isFull();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stackAr0.push((Object) null);
      String string0 = stackAr0.toString();
      assertEquals("[null,null,null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.increaseCapacity(0);
      stackAr0.increaseCapacity(550);
      stackAr0.push("org.autotest.StackAr");
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
      
      stackAr0.push("org.autotest.StackAr");
      Object object0 = stackAr0.pop();
      assertEquals("org.autotest.StackAr", object0);
      assertNotNull(object0);
      
      Object object1 = stackAr0.top();
      assertTrue(object1.equals((Object)object0));
      assertEquals("org.autotest.StackAr", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      Object object0 = stackAr0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackAr stackAr0 = new StackAr(642);
      assertNotNull(stackAr0);
      
      stackAr0.push("Ne#/");
      stackAr0.increaseCapacity(0);
      Object object0 = stackAr0.top();
      assertEquals("Ne#/", object0);
      assertNotNull(object0);
      
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
      
      Object object1 = stackAr0.pop();
      assertEquals("Ne#/", object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      String string0 = stackAr0.toString();
      assertEquals("[,]", string0);
      assertNotNull(string0);
      
      stackAr0.push("");
      String string1 = stackAr0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      
      Object object0 = stackAr0.get(0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = stackAr0.pop();
      assertFalse(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)string1));
      assertEquals("", object1);
      assertNotNull(object1);
      
      try { 
        stackAr0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.increaseCapacity(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      // Undeclared exception!
      try { 
        stackAr0.increaseCapacity((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.push((Object) null);
      String string0 = stackAr0.toString();
      assertEquals("[null]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      stackAr0.push("");
      stackAr0.increaseCapacity(0);
      stackAr0.get(0);
      stackAr0.pop();
      try { 
        stackAr0.top();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      try { 
        stackAr0.top();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      assertNotNull(stackAr0);
      
      stackAr0.increaseCapacity(3859);
      stackAr0.push("");
      String string0 = stackAr0.toString();
      assertEquals("[,]", string0);
      assertNotNull(string0);
      
      String string1 = stackAr0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[,]", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      stackAr0.push("[,]");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      assertNotNull(stackAr0);
      
      stackAr0.push("");
      try { 
        stackAr0.push("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StackAr stackAr0 = new StackAr(1);
      assertNotNull(stackAr0);
      
      boolean boolean0 = stackAr0.isFull();
      assertFalse(boolean0);
      
      stackAr0.increaseCapacity(1);
      stackAr0.push((Object) null);
      String string0 = stackAr0.toString();
      assertEquals("[null,]", string0);
      assertNotNull(string0);
      
      Object object0 = stackAr0.pop();
      assertNull(object0);
      
      try { 
        stackAr0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      // Undeclared exception!
      try { 
        stackAr0.increaseCapacity((-5940));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      assertNotNull(stackAr0);
      
      String string0 = stackAr0.toString();
      assertEquals("[,]", string0);
      assertNotNull(string0);
      
      String string1 = stackAr0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[,]", string1);
      assertNotNull(string1);
      
      try { 
        stackAr0.get(17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.increaseCapacity(0);
      stackAr0.push("v~aW`8pKTjNvc9$yN <");
      stackAr0.isFull();
      stackAr0.isFull();
      stackAr0.isFull();
      stackAr0.size();
      stackAr0.isFull();
      stackAr0.size();
      stackAr0.push("org.autotest.StackAr$StackIn");
      stackAr0.get(2);
      stackAr0.size();
      stackAr0.size();
      stackAr0.isFull();
      stackAr0.push((Object) null);
      stackAr0.size();
      stackAr0.size();
      stackAr0.pop();
      stackAr0.top();
      stackAr0.size();
      String string0 = stackAr0.toString();
      stackAr0.isFull();
      stackAr0.isFull();
      stackAr0.pop();
      Object object0 = stackAr0.top();
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StackAr stackAr0 = new StackAr(10);
      StackAr stackAr1 = new StackAr(10);
      stackAr0.push(stackAr1);
      stackAr0.isFull();
      stackAr1.push(stackAr0);
      stackAr1.isFull();
      stackAr0.increaseCapacity(1);
      stackAr0.isEmpty();
      stackAr1.isEmpty();
      stackAr1.size();
      Object object0 = stackAr1.pop();
      stackAr0.push(object0);
      stackAr0.top();
      stackAr0.pop();
      stackAr0.pop();
      int int0 = (-3248);
      try { 
        stackAr1.get((-3248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StackAr stackAr0 = null;
      try {
        stackAr0 = new StackAr((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }
}

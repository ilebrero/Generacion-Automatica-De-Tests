/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 19 21:05:07 GMT 2018
 */

package org.autotest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.autotest.StackAr;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StackAr_ESTest extends StackAr_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push("29,?|7");
      stackAr0.push("[29,?|7]");
      stackAr0.get(0);
      assertEquals(2, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      try { 
        stackAr0.get(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push("");
      stackAr0.top();
      assertEquals(1, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      int int0 = stackAr0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.get(0);
      assertEquals(1, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.isFull();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      boolean boolean0 = stackAr0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      boolean boolean0 = stackAr0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.isEmpty();
      assertEquals(1, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      int int0 = stackAr0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push("29,?|7");
      stackAr0.push("[29,?|7]");
      stackAr0.toString();
      assertEquals(2, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      try { 
        stackAr0.get((-25));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push("29,?|7");
      stackAr0.push("[29,?|7]");
      stackAr0.pop();
      stackAr0.pop();
      stackAr0.push("29,?|7");
      stackAr0.push((Object) null);
      stackAr0.pop();
      stackAr0.pop();
      try { 
        stackAr0.top();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      Object object0 = new Object();
      try { 
        stackAr0.push(object0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      try { 
        stackAr0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackAr stackAr0 = null;
      try {
        stackAr0 = new StackAr((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.autotest.StackAr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.top();
      assertEquals(1, stackAr0.size());
  }
}
